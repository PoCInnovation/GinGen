package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

var db = make(map[string]string)

//@HandlerDeclaration_Start

//@HandlerId: main.ping
//@Response
//@-Status: 200
//@-Description: respond "pong"
//@-Types: application/json
//@-Schema: /path/to/jaj

//@HandlerDeclaration_End
func ping(c *gin.Context) {
	c.String(http.StatusOK, "pong")
}

//@HandlerDeclaration_Start

//@HandlerId: main.getUserInfos
//@Response
//@-Status: 200
//@-Description: If the user is in the db, repond with its id and value
//@-Types: application/json
//@-Schema: /path/to/jaj
//@Response
//@-Status: 200
//@-Description: If the user is not in the db, respond with its id and "no value" as value
//@-Types: application/json
//@-Schema: /path/to/jaj

//@HandlerDeclaration_End
func getUserInfos(c *gin.Context) {
	user := c.Params.ByName("name")
	value, ok := db[user]
	if ok {
		c.JSON(http.StatusOK, gin.H{"user": user, "value": value})
	} else {
		c.JSON(http.StatusOK, gin.H{"user": user, "status": "no value"})
	}
}

//@HandlerDeclaration_Start

//@HandlerId: main.admin
//@RequestBody
//@-Description: i don t know
//@-Types: application/json
//@-Schema: /path/to/jaj
//@-required: true
//@Response
//@-Status: 200
//@-Description: updatethe db with the given user id, and respond "ok"
//@-Types: application/json
//@-Schema: /path/to/jaj

//@HandlerDeclaration_End
func admin(c *gin.Context) {
	user := c.MustGet(gin.AuthUserKey).(string)
	// Parse JSON
	var json struct {
		Value string `json:"value" binding:"required"`
	}
	if c.Bind(&json) == nil {
		db[user] = json.Value
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	}
}

func setupRouter() *gin.Engine {
	// Disable Console Color
	// gin.DisableConsoleColor()
	r := gin.Default()
	
	//@EndPointDeclaration_Start
	//@Method: GET
	//@Path: /ping
	//@HandlerId: main.ping
	//@Summary: ping test
	//@Description: when pinged respond pong
	//@EndPointDeclaration_end
	r.GET("/ping", ping)

	//@EndPointDeclaration_Start
	//@Method: GET
	//@Path: /user/:name
	//@HandlerId: main.getUserInfos
	//@Summary: gets user's infos
	//@Description: when called resond with all users infos
	//@EndPointDeclaration_end
	r.GET("/user/:name", getUserInfos)

	// Authorized group (uses gin.BasicAuth() middleware)
	// Same than:
	// authorized := r.Group("/")
	// authorized.Use(gin.BasicAuth(gin.Credentials{
	//	  "foo":  "bar",
	//	  "manu": "123",
	//}))
	authorized := r.Group("/", gin.BasicAuth(gin.Accounts{
		"foo":  "bar", // user:foo password:bar
		"manu": "123", // user:manu password:123
	}))

	/* example curl for /admin with basicauth header
	   Zm9vOmJhcg== is base64("foo:bar")
		curl -X POST \
	  	http://localhost:8080/admin \
	  	-H 'authorization: Basic Zm9vOmJhcg==' \
	  	-H 'content-type: application/json' \
	  	-d '{"value":"bar"}'
	*/
	//@EndPointDeclaration_Start
	//@Method: POST
	//@Path: /admin
	//@HandlerId: main.admin
	//@Summary: admin
	//@Description: admin
	//@EndPointDeclaration_end
	authorized.POST("admin", admin)

	return r
}

func main() {
	r := setupRouter()
	// Listen and Server in 0.0.0.0:8080
	r.Run(":8080")
}